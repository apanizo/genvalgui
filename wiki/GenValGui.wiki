== GenValGui ==
|| *GenValGui:* || *Generator* *Validation* *GUIs* ||

Basically, we can separate into three different steps the internal behaviour of that framework.
 || * *The first step:* "Introducing info into the Genvalgui Framework" || 
In the first step the user have to indicate (using annotations):
     # The classes that will be validated into the Validation framework     
     # The POJO classes that will be available to show into the browser.
     # The custom configuration. 

To implement that, we use three annotations (_keep in mind, be patient. We’ll see their use in an example later_):

 - *@GwtValidation:* Represents the entry point to the validation API, you must include the type of classes that will be validated.

 - *@GvgInfoAnnotation:* Like the previous annotation, you must include here the classes that will be parsed to generate their GUIs.

{{{
   package com.example.myproject.genvalgui;

   public final class GenValGuiFactory {

        @GwtValidation(value = {Person.class, Adress.class, Email.class, ArrayList.class, HashMap.class}
                      ,groups = {Default.class})
	public interface GwtValidator extends Validator {
	}
	
	@GvgInfoAnnotation(value={Person.class,Adress.class,Email.class})
	public interface GwtGenValGuiBuilder extends GvgInterfaceBuilder{

	}
	public static GwtGenValGuiBuilder createBuilder() {
		return GWT.create(GwtGenValGuiBuilder.class);
	}
}
}}}

|| || || || <img src="http://genvalgui.googlecode.com/svn/resources/imgs/Architecture-Step1.jpg"  alt="Step 1 - Architecture" height="250" width="520" /> ||

 - *@Caption:* This annotation is used in the POJO classes to indicate the name of the columns. You can customize the appearance of the GUIs.
{{{
    //Example
    @Caption(name="Info", button="Mails")
    private HashMap<String, Email> info;
}}}


Those annotations are placed in the principal class (entry point) of this framework (_keep in mind, it’ll useful to understand completely the example_).

----
  || * *The second:* "Generate the code in compilation time" ||
The second step is to generate the code of that GUIs, using *Deferred Binding* (to generate the code in compilation time), *CellWidget* (the classes that will represent the attributes and *client databinding*) and the *JSR-303* (to implement all the validation behaviour).
----
  || * *The third step* ||
----